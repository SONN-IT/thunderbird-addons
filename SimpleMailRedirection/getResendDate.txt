//see modules\jsmime\jsmime.js HeaderEmitter.prototype.addDate = function(date) {...}
var kMonthNames = [ "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec",];
var kDaysOfWeek = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
function padTo2Digits(num) {
  return num < 10 ? "0" + num : num.toString();
}
function getResentDate() {
  let date=new Date();

  let fullYear = date.getFullYear();
  let month = date.getMonth();
  let dayOfMonth = date.getDate();
  let dayOfWeek = date.getDay();
  let hours = date.getHours();
  let minutes = date.getMinutes();
  let seconds = date.getSeconds();
  let tzOffset = date.getTimezoneOffset();

  // RFC 5322 says years can't be before 1900. The after 9999 is a bit that
  // derives from the specification saying that years have 4 digits.
  if (fullYear < 1900 || fullYear > 9999) {
    throw new Error("Date year is out of encodable range");
  }

  // Start by computing the timezone offset for a day. We lack a good format, so
  // the the 0-padding is done by hand. Note that the tzoffset we output is in
  // the form ±hhmm, so we need to separate the offset (in minutes) into an hour
  // and minute pair.
  let tzOffHours = Math.abs(Math.trunc(tzOffset / 60));
  let tzOffMinutes = Math.abs(tzOffset) % 60;
  let tzOffsetStr =
    (tzOffset > 0 ? "-" : "+") +
    padTo2Digits(tzOffHours) +
    padTo2Digits(tzOffMinutes);

  // Convert the day-time figure into a single value to avoid unwanted line
  // breaks in the middle.
  let dayTime = [
    kDaysOfWeek[dayOfWeek] + ",",
    dayOfMonth,
    kMonthNames[month],
    fullYear,
    padTo2Digits(hours) +
      ":" +
      padTo2Digits(minutes) +
      ":" +
      padTo2Digits(seconds),
    tzOffsetStr,
  ].join(" ");
  return dayTime;
};
